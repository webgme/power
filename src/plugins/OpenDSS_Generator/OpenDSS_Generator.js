/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 0.14.0 from webgme on Mon Oct 05 2015 14:19:37 GMT-0500 (CDT).
 */

define([
    'plugin/PluginConfig',
    'plugin/PluginBase',
    'text!./metadata.json'
], function (
    PluginConfig,
    PluginBase,
    pluginMetadata) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of OpenDSS_Generator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin OpenDSS_Generator.
     * @constructor
     */

    var OpenDSS_Generator = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    OpenDSS_Generator.metadata = pluginMetadata;

    // Prototypal inheritance from PluginBase.
    OpenDSS_Generator.prototype = Object.create(PluginBase.prototype);
    OpenDSS_Generator.prototype.constructor = OpenDSS_Generator;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    OpenDSS_Generator.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;
        var output = '';


        // Using the logger.
        //self.logger.debug('This is a debug message.');
        //self.logger.info('This is an info message.');
        //self.logger.warn('This is a warning message.');
        //self.logger.error('This is an error message.');

        /** Using the coreAPI to build desired method functions.
        * If not a power system then return
        */

        nodeObject = self.activeNode;
        if (self.core.getPath(self.activeNode) === ' ' || self.isMetaTypeOf(self.activeNode, self.META.PowerSystem) === false)
        {
            callback('ActiveNode is not a powersystem', self.result);
            return;
        }
        
        /** If it's a power system then start loading
        */
        self.core.loadSubTree(self.activeNode, function (err, nodeList) {
            if (err) {
                callback(err);
                return;
            }
            
            /** Obtain the node paths
            */
            var i,
                nodePath,
                nodes = {};
            for (i = 0; i < nodeList.length; i += 1) {
                nodePath = self.core.getPath(nodeList[i]);
                nodes[nodePath] = nodeList[i];
                //self.logger.info(nodePath);
            }
            
            /** Method variables initialization
            */
            var powersystem = {
                sources: [], lines: [], loads: [], transformers: [], faults: []
            };
            var Load_data_list = {
                key: [], value: []
            };
            var comp_data_list = [];
            var childrenPaths = self.core.getChildrenPaths(self.activeNode);
            var j,
                connectionPaths, connectionNode,srcpath, srcNode, dstPath, dstNode;
            
            /** Loop through all childrens
            */
            for (i=0; i < childrenPaths.length; i += 1) {
                var childNode = nodes[childrenPaths[i]];
                
                /** Check if the Node Meta type is a Source
                */
                if (self.isMetaTypeOf(childNode, self.META.Source) === true) {
                    var nam = self.core.getAttribute(childNode, 'name');
                    var connbus;
                    connectionPaths = self.core.getCollectionPaths(childNode, 'src'); // Obtain the connections between a node with all the other connecting nodes
                    for (j = 0; j < connectionPaths.length; j += 1) {
                        //self.logger.info(self.core.getAttribute(childNode, 'name'));
                        connectionNode = nodes[connectionPaths[j]]; 
                        srcpath = self.core.getPointerPath(connectionNode, 'src'); // Obtain source path 
                        srcNode = nodes[srcpath]; // Obtain source node
                        dstPath = self.core.getPointerPath(connectionNode, 'dst'); //Obtain destination path
                        dstNode = nodes[dstPath]; //Obtain destination node
                        //self.logger.info(self.core.getAttribute(dstNode, 'name'));
                        var dstname = self.core.getAttribute(dstNode, 'name'); // Obtain destination node name
                        var relid = self.core.getRelid(dstNode); // Obtain destination node ID
                        connbus = dstname;
                        //buses.push('bus' + 1 + '=' + dstname);
                    }
                    
                    /** Gathering the information using coreAPI and storing it in the dictionary
                    */
                    
                    var sourcenam = self.core.getAttribute(childNode, 'name');
                    var MVA = self.core.getAttribute(childNode, 'MVA');
                    var x1r1 = self.core.getAttribute(childNode, 'X1R1');
                    //var x1 = self.core.getAttribute(childNode, 'X1');
                    var phase = self.core.getAttribute(childNode, 'phases');
                    var basekv = self.core.getAttribute(childNode, 'basekv');
                    powersystem.sources.push({
                        name: sourcenam,
                        MVA: MVA,
                        X1R1: x1r1,
                        //X1: x1,
                        phases: phase,
                        basekv: basekv,
                        conbus: connbus
                    });
                }
                
                /** Check if the Node Meta type is a Transmission Line
                */
                
                if (self.isMetaTypeOf(childNode, self.META.TransmissionLine) === true) {
                    var Lname = self.core.getAttribute(childNode, 'name');
                    //self.logger.info(Lname);
                    connectionPaths = self.core.getCollectionPaths(childNode, 'src');
                    /** Obtain the source and destination and their corresponding paths 
                    */
                    for (j = 0; j < connectionPaths.length; j += 1) {
                        //self.logger.info(self.core.getAttribute(childNode, 'name'));
                        connectionNode = nodes[connectionPaths[j]];
                        srcpath = self.core.getPointerPath(connectionNode, 'src');
                        srcNode = nodes[srcpath];
                        dstPath = self.core.getPointerPath(connectionNode, 'dst');
                        dstNode = nodes[dstPath];
                        var dname = self.core.getAttribute(dstNode, 'name');
                        var destinationbus = dname;
                        //self.logger.info(dname);
                    }

                    connectionPaths = self.core.getCollectionPaths(childNode, 'dst');
                    for (j = 0; j < connectionPaths.length; j += 1) {
                        //    self.logger.info(self.core.getAttribute(childNode, 'name'));
                        connectionNode = nodes[connectionPaths[j]];
                        srcpath = self.core.getPointerPath(connectionNode, 'src');
                        srcNode = nodes[srcpath];
                        dstPath = self.core.getPointerPath(connectionNode, 'dst');
                        dstNode = nodes[dstPath];
                        //self.logger.info(self.core.getAttribute(dstNode, 'name'));
                        var srcname = self.core.getAttribute(srcNode, 'name');
                        var sourcebus = srcname;
                        //self.logger.info(srcname);
                    }
                    
                    /** Gather the related information and store it in the dictionary
                    */
                    var Linename = self.core.getAttribute(childNode, 'name');
                    var C0 = self.core.getAttribute(childNode, 'C0');
                    var C1 = self.core.getAttribute(childNode, 'C1');
                    var X0 = self.core.getAttribute(childNode, 'X0');
                    var X1 = self.core.getAttribute(childNode, 'X1');
                    var R0 = self.core.getAttribute(childNode, 'R0');
                    var Length = self.core.getAttribute(childNode, 'Length');
                    var R1 = self.core.getAttribute(childNode, 'R1');
                    var Units = self.core.getAttribute(childNode, 'units');
                    //self.logger.info(Linename);
                    //self.logger.info(C0);
                    //self.logger.info(C1);
                    //self.logger.info(X0);
                    //self.logger.info(X1);
                    //self.logger.info(R0);
                    //self.logger.info(R1);
                    //self.logger.info(Length);
                    //self.logger.info(Units);
                    powersystem.lines.push({
                        name: Linename,
                        C0: C0,
                        C1: C1,
                        R1: R1,
                        R0: R0,
                        X0: X0,
                        X1: X1,
                        Length: Length,
                        Units: Units,
                        srcbus: sourcebus,
                        dstbus: destinationbus
                    });
                    comp_data_list.push(Linename);
                }
                
                /** Check if the Node Meta type is a Transformer 
                */
                 if (self.isMetaTypeOf(childNode, self.META.Transformer) === true){
                    var Tname = self.core.getAttribute(childNode, 'name');
                	//self.logger.info(Tname);
                	connectionPaths = self.core.getCollectionPaths(childNode, 'dst');
                    
                     /** Obtain the source and destination and their corresponding paths 
                    */
                    for (j = 0; j < connectionPaths.length; j += 1) {
                        connectionNode = nodes[connectionPaths[j]];
                        srcpath = self.core.getPointerPath(connectionNode, 'src');                            
                        srcNode = nodes[srcpath];
                        dstPath = self.core.getPointerPath(connectionNode, 'dst');
                    	dstNode = nodes[dstPath];
                        var Transformer_sourcename = self.core.getAttribute(srcNode, 'name');
                        //self.logger.info(Transformer_sourcename);
                    }
                   	connectionPaths = self.core.getCollectionPaths(childNode, 'src');
                    for (j = 0; j < connectionPaths.length; j += 1) {                            
                    	connectionNode = nodes[connectionPaths[j]];
                        srcpath = self.core.getPointerPath(connectionNode, 'src');
                        srcNode = nodes[srcpath];
                        dstPath = self.core.getPointerPath(connectionNode, 'dst');
                    	dstNode = nodes[dstPath];
                    	var Transformer_dstname = self.core.getAttribute(dstNode, 'name');
                    	//self.logger.info(Transformer_dstname);
                    } 
                     
                    /** Gather the related information and store it in the dictionary
                    */
                    var num_of_phases = self.core.getAttribute(childNode, 'phases');
                	var conns = self.core.getAttribute(childNode, 'conns');
                	var XHL = self.core.getAttribute(childNode, 'XHL');
                	var kvs = self.core.getAttribute(childNode, 'kvs');
                	powersystem.transformers.push({
                        name: Tname,                            
                        phases: num_of_phases,
                        source_bus: Transformer_sourcename,
                        Dest_name: Transformer_dstname,
                        XHL: XHL,
                        conns: conns,
                        kvs: kvs
                    });                    	
                    //self.logger.info(num_of_phases);
                }
                
                /** Check if the Node Meta type is a Load 
                */
                if (self.isMetaTypeOf(childNode, self.META.Load) === true) {
                    var Ldname = self.core.getAttribute(childNode, 'name');
                    //self.logger.info(Ldname);
                    
                    /** Obtain the source and destination and their corresponding paths 
                    */
                    connectionPaths = self.core.getCollectionPaths(childNode, 'dst');
                    for (j = 0; j < connectionPaths.length; j += 1) {
                        //self.logger.info(self.core.getAttribute(childNode, 'name'));
                        connectionNode = nodes[connectionPaths[j]];
                        srcpath = self.core.getPointerPath(connectionNode, 'src');
                        srcNode = nodes[srcpath];
                        dstPath = self.core.getPointerPath(connectionNode, 'dst');
                        dstNode = nodes[dstPath];
                        //self.logger.info(self.core.getAttribute(dstNode, 'name'));
                        var sname = self.core.getAttribute(srcNode, 'name');
                        var dbus = sname;
                        //self.logger.info(sname);
                    }
                    
                    /** Gather the related information and store it in the dictionary
                    */
                    var Loadname = self.core.getAttribute(childNode, 'name');
                    var phases = self.core.getAttribute(childNode, 'phases');
                    var KW = self.core.getAttribute(childNode, 'Kw');
                    var KV = self.core.getAttribute(childNode, 'kv');
                    var kvar = self.core.getAttribute(childNode, 'kvar');
                    //self.logger.info(Loadname);
                    //self.logger.info(phases);
                    //self.logger.info(KW);
                    //self.logger.info(KV);
                    powersystem.loads.push({
                        name: Loadname,
                        KW: KW,
                        KV: KV,
                        kvar: kvar,
                        phases: phases,
                        destbus: dbus
                    });
                    Load_data_list.key.push({
                    	key: Loadname,
                    	value: KW
                    });                   
                }
                
                /** Check if the Node Meta type is a Fault 
                */
                if (self.isMetaTypeOf(childNode, self.META.Fault) === true) {
                    var Fname = self.core.getAttribute(childNode, 'name');
                    
                    /** Obtain the source and destination and their corresponding paths 
                    */
                    connectionPaths = self.core.getCollectionPaths(childNode, 'dst');
                    for (j = 0; j < connectionPaths.length; j += 1) {
                        connectionNode = nodes[connectionPaths[j]];                            
                        srcpath = self.core.getPointerPath(connectionNode, 'src');
                        srcNode = nodes[srcpath];
                        var faultsourcename = self.core.getAttribute(srcNode, 'name');
                    }
                    
                    /** Gather the related information and store it in the dictionary
                    */
                    var Fname = self.core.getAttribute(childNode, 'name');
                    var numofphases = self.core.getAttribute(childNode, 'phases');
                    var R = self.core.getAttribute(childNode, 'R');                        
                    powersystem.faults.push({
                        name: Fname,
                        phases: numofphases,
                        sourcebuss: faultsourcename,
                        R: R
                    }); 
                }
               
            }

            /** Using the stored information from the dictionary to create the system model 
            */
            var dssConfig = 'clear';
            var comp_data = new String();
            var Load_data = new String();
            dssConfig += "\n" + 'New object=circuit.samplename' + "\n" + '//Define Sources' + "\n";
            for (i =0; i < powersystem.sources.length; i += 1) {
                dssConfig += 'New vsource.' + powersystem.sources[i].name + ' ' + 'bus1=' + powersystem.sources[i].conbus + 
                			 ' ' + 'phases=' + powersystem.sources[i].phases + ' ' + 'basekv=' + powersystem.sources[i].basekv + 
                			 ' ' + 'Mvasc3=' + powersystem.sources[i].MVA + ' ' + 'x1r1=' + powersystem.sources[i].X1R1 + ' ' + 
                			 'x0r0=' + powersystem.sources[i].X1R1;
                dssConfig += "\n";
                    //self.logger.info(dssConfig);
            }
            dssConfig += '//Define the lines' + "\n";
            comp_data += '[';
            for (i = 0; i < powersystem.lines.length; i += 1) {
                dssConfig += 'New Line.' + powersystem.lines[i].name + ' ' + 'bus1=' + powersystem.lines[i].srcbus + ' ' + 
                			 'bus2=' + powersystem.lines[i].dstbus + ' ' + 'R1=' + powersystem.lines[i].R1 + ' ' + 'R0=' + 
                			 powersystem.lines[i].R0 + ' ' + 'X1=' + powersystem.lines[i].X1 + ' ' + 'X0=' + 
                			 powersystem.lines[i].X0 + ' ' + 'C1=' + powersystem.lines[i].C1 + ' ' + 'C0=' + 
                			 powersystem.lines[i].C0 + ' ' + 'length=' + powersystem.lines[i].Length + ' ' + 'units=' + 
                			 powersystem.lines[i].Units;
                dssConfig += "\n";
                comp_data += "'" + 'Line.' + powersystem.lines[i].name + "'";
                if (i != (powersystem.lines.length-1)){
                	comp_data += ",";
                }
            }
            comp_data += ']';
            dssConfig += '//Define the transformers' + "\n";
            for (i = 0; i < powersystem.transformers.length; i += 1) {
                dssConfig += 'New Transformer.' + powersystem.transformers[i].name + ' ' + 'phases=' + 
                			 powersystem.transformers[i].phases + ' ' + 'buses=' + '(' + powersystem.transformers[i].source_bus + 
                			 ' ' + powersystem.transformers[i].Dest_name + ')' + ' ' + 'conns=' + "'" + 
                			 powersystem.transformers[i].conns + "'" + ' ' + 'kvs=' + '"' + powersystem.transformers[i].kvs + 
                			 '"' + ' ' + 'XHL=' + powersystem.transformers[i].XHL;
                dssConfig += "\n";
            }
            dssConfig += '//Define the loads' + "\n";
            Load_data += '{';
            for (i = 0; i < powersystem.loads.length; i += 1) {
                dssConfig += 'New Load.' + powersystem.loads[i].name + ' ' + 'bus1=' + powersystem.loads[i].destbus + ' ' + 
                			 'phases=' + powersystem.loads[i].phases + ' ' + 'kVA=' + powersystem.loads[i].KW + "," + 
                			 powersystem.loads[i].kvar + ' ' + 'Kv=' + powersystem.loads[i].KV + ' ' + 'conn=delta' + ' ' + 
                			 'model=1';
                dssConfig += "\n";
                Load_data += "'" + 'Load.' + powersystem.loads[i].name +  "'" + ': ' + "(" + powersystem.loads[i].KW + "," +
                			 powersystem.loads[i].kvar + ")";
                if (i != (powersystem.loads.length-1)){
                	Load_data += ",";
                }
            }
            Load_data += "}";
            dssConfig += '//Define the faults' + "\n";
            for (i = 0; i < powersystem.faults.length; i += 1) {
                dssConfig += 'New fault.' + powersystem.faults[i].name + ' ' + 'bus1=' + powersystem.faults[i].sourcebuss + ' ' + 
                			 'phases=' + powersystem.faults[i].phases + ' ' + 'R=' + powersystem.faults[i].R;
                dssConfig += "\n";
            }
            dssConfig += '//Define the voltagebases' + "\n" + 'set voltagebases=' + '[' + basekv + ']' + "\n" + 'calcv' + "\n" + 
            			 'set freq=60' + "\n" + 'set mode=snapshot' + "\n" + 'solve' + "\n" + 
            			 '//used for steady state analysis of power systems';
            
            /** Generating the artifacts
            */
            self.logger.info(dssConfig);
                var artifact = self.blobClient.createArtifact('PowerSystem');
                // Upload the files to server.
                artifact.addFiles({
                    'output.json': JSON.stringify(powersystem,null,5),
                    'input.txt': dssConfig,
                    'open_dss_input_file.dss': dssConfig,
                    'component_data.txt': comp_data,
                    'component_data.json': JSON.stringify(comp_data_list, null, 4),
                    'Load_data.txt': Load_data,
                    'Load_data.json': JSON.stringify(Load_data_list, null, 2)
                }, function (err) {
                    if (err) {
                        callback(err);
                        return
                    }
                    // Save the artifact (uploads meta data about the file(s) within in it).
                    artifact.save(function (err, hash) {
                        if (err) {
                            callback(err);
                            return
                        }

                        // Add a link to the artifact to the plugin-result.
                        self.result.addArtifact(hash);

                        self.result.setSuccess(true);
                        callback(null, self.result);
                    })
                });


            //self.result.setSuccess(true);
            //callback(null, self.result);
        });




        //self.core.setAttribute(nodeObject, 'name', 'My new obj');
        //self.core.setRegistry(nodeObject, 'position', {x: 70, y: 70});


        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        //self.save('New Plugin updated model.', function (err) {
        //    if (err) {
        //        callback(err, self.result);
        //        return;
        //    }

        //});

    };

    return OpenDSS_Generator;
});
